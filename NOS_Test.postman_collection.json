{
	"info": {
		"_postman_id": "09f97c6e-8364-4967-9c33-22315cb09650",
		"name": "NOS_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4641439"
	},
	"item": [
		{
			"name": "gorest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"if (responseCode.code >= 200 & responseCode.code <= 299){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"    // checking body format\r",
							"    var body_result = {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": { \"type\": \"integer\" },\r",
							"                \"user_id\": { \"type\": \"integer\" },\r",
							"                \"title\": { \"type\": \"string\" },\r",
							"                \"due_on\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
							"                \"status\": { \"type\": \"string\" }\r",
							"            },\r",
							"            \"required\": [\"id\", \"user_id\", \"title\", \"due_on\", \"status\"]\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.test(\"body result is valid\", function () {\r",
							"        pm.response.to.have.jsonSchema(body_result);\r",
							"    });\r",
							"\r",
							"    // checking status result\r",
							"    var users_status = pm.response.json();\r",
							"    pm.test(\"All Users have status 'completed'\", function () {\r",
							"        users_status.forEach(client => {\r",
							"            pm.expect(client.status).to.eql('completed');\r",
							"        });\r",
							"    });\r",
							"\r",
							"    // checking date_format\r",
							"    var date_format = pm.response.json();\r",
							"    pm.test(\"Validate due_on date format\", function () {\r",
							"        date_format.forEach(client => {\r",
							"            pm.expect(new Date(client.due_on).toString()).not.to.eql('Invalid Date');\r",
							"        });\r",
							"    });\r",
							"    \r",
							"\r",
							"\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/todos",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"todos"
					]
				}
			},
			"response": []
		}
	]
}